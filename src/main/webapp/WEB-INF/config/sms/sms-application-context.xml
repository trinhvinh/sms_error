<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"	
	xsi:schemaLocation="http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.0.xsd">
	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />
	<context:annotation-config />

	<!-- Scans the classpath of this application for @Components to deploy as beans -->
	<context:component-scan base-package="com" />

	<mvc:resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves view names to protected .jsp resources within the /WEB-INF/views directory -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/pages/views/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- set the max upload size100MB -->
		<property name="maxUploadSize">
			<value>104857600</value>
		</property>
		<property name="maxInMemorySize">
			<value>4096</value>
		</property>
	</bean>

	<context:property-placeholder location="classpath:properties/database.properties,classpath:mybatis/mybatis.properties" />

	<!-- Declare a datasource that has pooling capabilities -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close" 
		p:driverClass="${database.jdbc.DriveClassName}"
		p:jdbcUrl="${database.jdbc.url}" 
		p:user="${database.jdbc.username}" 
		p:password="${database.jdbc.password}"
		p:acquireIncrement="1" 
		p:idleConnectionTestPeriod="1" 
		p:maxPoolSize="1"
		p:maxStatements="1" 
		p:minPoolSize="1" />

	<!-- Declare a transaction manager -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />

	<!-- define the SqlSessionFactory, notice that configLocation is not needed when you use MapperFactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis/sms-sql-mapping.xml" />
		<property name="mapperLocations" value="classpath:/com/**/service/**/*.xml" />
	</bean>

	<bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler" lazy-init="true" />

	<!-- scan for mappers and let them be autowired -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.**.service" />
	</bean>

	<import resource="sms-resources-context.xml" />

</beans>